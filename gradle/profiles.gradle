
    def herokuProfiles='heroku';
    def localProfiles='local';
    def propertyDrivenProfiles;

    if (project.hasProperty('heroku')) {
        propertyDrivenProfiles = herokuProfiles;
        apply from: rootProject.file('gradle/profile_heroku.gradle');

    } else {//if (project.hasProperty('local')) {
        propertyDrivenProfiles = localProfiles;
        apply from: rootProject.file('gradle/profile_local.gradle');
   }

    println 'Using profile: "' + propertyDrivenProfiles + '" for ' + project.getName()

    // bootRun will rely on the -P profile argument,
    // defaulting to the "local" profile if no -P arguments are provided
    bootRun {
        systemProperties = [
                'spring.profiles.active': propertyDrivenProfiles
        ]

        // Use -Pproperty.name=value in addition to a -P profile argument
        // for each property below to pass database connection properties.
        //
        // These will only be used if profile specific property files do not override them.
        // They are intended for use with the "prod" profile.

        ext.applyPropertyIfExists = { propertyKey ->
            if(project.hasProperty(propertyKey)) {
                systemProperties[propertyKey] = project.getProperty(propertyKey)
            }
        }
        //applyPropertyIfExists('spring.datasource.url')
        //applyPropertyIfExists('spring.datasource.username')
        //applyPropertyIfExists('spring.datasource.password')

    }